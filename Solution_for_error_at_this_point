This is the solution for error at this point:
BeanInstantiationException

Changes in ApplicationContextConfig
package com.niit.shop.config;

import java.util.Properties;

import javax.sql.DataSource;

import org.apache.commons.dbcp2.BasicDataSource;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.orm.hibernate4.HibernateTransactionManager;
import org.springframework.orm.hibernate4.LocalSessionFactoryBuilder;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.niit.shop.dao.CartDAO;
import com.niit.shop.dao.CartDAOImpl;
import com.niit.shop.dao.CategoryDAO;
import com.niit.shop.dao.CategoryDAOImpl;
import com.niit.shop.dao.ProductDAO;
import com.niit.shop.dao.ProductDAOImpl;
import com.niit.shop.dao.SupplierDAO;
import com.niit.shop.dao.SupplierDAOImpl;
import com.niit.shop.model.Cart;
import com.niit.shop.model.Category;
import com.niit.shop.model.Product;
import com.niit.shop.model.Supplier;
import com.niit.shop.model.User;










@Configuration
@ComponentScan("com.niit.shop")
@EnableTransactionManagement

	
public class ApplicationContextConfig {
    
    @Bean(name = "dataSource")
    public DataSource getDataSource() {
    	BasicDataSource dataSource = new BasicDataSource();
    	dataSource.setDriverClassName("org.h2.Driver");
    	dataSource.setUrl("jdbc:h2:tcp://localhost/~/shop");
    	dataSource.setUsername("g3");
    	dataSource.setPassword("1234");
    	
    	return dataSource;
    }
    
    
    private Properties getHibernateProperties() {
    	Properties properties = new Properties();
    	properties.setProperty("hibernate.hbm2ddl.auto", "update");
    	properties.put("hibernate.show_sql", "true");
    	properties.put("hibernate.dialect", "org.hibernate.dialect.H2Dialect");
    	return properties;
    }
    
    @Autowired
    @Bean(name = "sessionFactory")
    public SessionFactory getSessionFactory(DataSource dataSource) {
    	LocalSessionFactoryBuilder sessionBuilder = new LocalSessionFactoryBuilder(dataSource);
    	sessionBuilder.addProperties(getHibernateProperties());
    	sessionBuilder.addAnnotatedClasses(Category.class);
    	sessionBuilder.addAnnotatedClasses(Supplier.class);
    	sessionBuilder.addAnnotatedClasses(User.class);
    	sessionBuilder.addAnnotatedClasses(Product.class);
    	sessionBuilder.addAnnotatedClasses(Cart.class);
    	return sessionBuilder.buildSessionFactory();
    	
    }
    
	@Autowired
	@Bean(name = "transactionManager")
	public HibernateTransactionManager getTransactionManager(
			SessionFactory sessionFactory) {
		HibernateTransactionManager transactionManager = new HibernateTransactionManager(
				sessionFactory);

		return transactionManager;
	}
    
   @Autowired
   @Bean(name = "CategoryDAO")
   public CategoryDAO getCategoryDao(SessionFactory sessionFactory) {
   return new CategoryDAOImpl(sessionFactory);
   }

   @Autowired
   @Bean(name = "SupplierDAO")
   public SupplierDAO getSupplierDao(SessionFactory sessionFactory) {
   return new SupplierDAOImpl(sessionFactory);
   }
   
   @Autowired
   @Bean(name = "ProductDAO")
   public ProductDAO getProductDao(SessionFactory sessionFactory) {
   return new ProductDAOImpl(sessionFactory);
   }
   @Autowired
   @Bean(name = "CartDAO")
   public CartDAO getCartDao(SessionFactory sessionFactory) {
   	return new CartDAOImpl(sessionFactory);
   }
}


